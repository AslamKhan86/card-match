{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/youngsambyun/Documents/WORK/UI/card-match/src/App.js\";\nimport React, { PureComponent } from 'react';\nimport Header from \"./components/header/Header\";\nimport GameOver from \"./components/card/GameOver\";\nimport ContainerView from \"./components/ContainerView\";\nimport CardView from \"./components/card/CardView\";\nimport \"./styles/main.css\";\n\nvar App = function (_PureComponent) {\n  _inherits(App, _PureComponent);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isFlipped: Array(12).fill(false),\n      shuffledCard: App.duplicateCard().sort(function () {\n        return Math.random() - 0.5;\n      }),\n      clickCount: 1,\n      totalCount: 0,\n      prevSelectedCard: -1,\n      prevCardId: -1\n    };\n\n    _this.handleClick = function (event) {\n      event.preventDefault();\n      var cardId = event.target.id;\n\n      var newFlipps = _this.state.isFlipped.slice();\n\n      _this.setState({\n        prevSelectedCard: _this.state.shuffledCard[cardId],\n        prevCardId: cardId,\n        totalCount: _this.state.totalCount + 1\n      });\n\n      if (newFlipps[cardId] === false) {\n        newFlipps[cardId] = !newFlipps[cardId];\n\n        _this.setState(function (prevState) {\n          return {\n            isFlipped: newFlipps,\n            clickCount: _this.state.clickCount + 1\n          };\n        });\n\n        if (_this.state.clickCount === 2) {\n          _this.setState({\n            clickCount: 1\n          });\n\n          var prevCardId = _this.state.prevCardId;\n          var newCard = _this.state.shuffledCard[cardId];\n          var previousCard = _this.state.prevSelectedCard;\n\n          _this.isCardMatch(previousCard, newCard, prevCardId, cardId);\n        }\n      }\n    };\n\n    _this.isCardMatch = function (card1, card2, card1Id, card2Id) {\n      if (card1 === card2) {\n        var hideCard = _this.state.shuffledCard.slice();\n\n        hideCard[card1Id] = -1;\n        hideCard[card2Id] = -1;\n        setTimeout(function () {\n          _this.setState(function (prevState) {\n            return {\n              shuffledCard: hideCard\n            };\n          });\n        }, 1000);\n      } else {\n        var flipBack = _this.state.isFlipped.slice();\n\n        flipBack[card1Id] = false;\n        flipBack[card2Id] = false;\n        setTimeout(function () {\n          _this.setState(function (prevState) {\n            return {\n              isFlipped: flipBack\n            };\n          });\n        }, 1000);\n      }\n    };\n\n    _this.restartGame = function () {\n      _this.setState({\n        isFlipped: Array(12).fill(false),\n        shuffledCard: App.duplicateCard().sort(function () {\n          return Math.random() - 0.5;\n        }),\n        clickCount: 1,\n        totalCount: 0,\n        prevSelectedCard: -1,\n        prevCardId: -1\n      });\n    };\n\n    _this.isGameOver = function () {\n      return _this.state.isFlipped.every(function (element, index, array) {\n        return element !== false;\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ContainerView, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        }\n      }, React.createElement(Header, {\n        restartGame: this.restartGame,\n        totalCount: this.state.totalCount,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        }\n      }), React.createElement(CardView, {\n        restartGame: this.restartGame,\n        isGameOver: this.isGameOver,\n        shuffledCard: this.state.shuffledCard,\n        isFlipped: this.state.isFlipped,\n        handleClick: this.handleClick,\n        totalCount: this.state.totalCount,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(PureComponent);\n\nApp.duplicateCard = function () {\n  return [0, 1, 2, 3, 4, 5].reduce(function (preValue, current, index, array) {\n    return preValue.concat([current, current]);\n  }, []);\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/youngsambyun/Documents/WORK/UI/card-match/src/App.js"],"names":["React","PureComponent","Header","GameOver","ContainerView","CardView","App","state","isFlipped","Array","fill","shuffledCard","duplicateCard","sort","Math","random","clickCount","totalCount","prevSelectedCard","prevCardId","handleClick","event","preventDefault","cardId","target","id","newFlipps","slice","setState","prevState","newCard","previousCard","isCardMatch","card1","card2","card1Id","card2Id","hideCard","setTimeout","flipBack","restartGame","isGameOver","every","element","index","array","reduce","preValue","current","concat"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport Header from './components/header/Header';\nimport GameOver from './components/card/GameOver';\nimport ContainerView from './components/ContainerView';\nimport CardView from './components/card/CardView';\n\nimport './styles/main.css';\n\nclass App extends PureComponent {\n\n  state = {\n    isFlipped: Array(12).fill(false),\n    shuffledCard: App.duplicateCard().sort(() => Math.random() - 0.5),\n    clickCount: 1,\n    totalCount: 0,\n    prevSelectedCard: -1,\n    prevCardId: -1\n  };\n\n  static duplicateCard = () => {\n    return [0,1,2,3,4,5].reduce((preValue, current, index, array) => {\n      return preValue.concat([current, current])\n    },[]);\n  };\n\n  handleClick = event => {\n    event.preventDefault();\n    const cardId = event.target.id;\n    const newFlipps = this.state.isFlipped.slice();\n    this.setState({\n        prevSelectedCard: this.state.shuffledCard[cardId],\n        prevCardId: cardId,\n        totalCount: this.state.totalCount + 1,\n    });\n\n    if (newFlipps[cardId] === false) {\n      newFlipps[cardId] = !newFlipps[cardId];\n      this.setState(prevState => ({\n        isFlipped: newFlipps,\n        clickCount: this.state.clickCount + 1\n      }));\n\n      if (this.state.clickCount === 2) {\n        this.setState({ clickCount: 1 });\n        const prevCardId = this.state.prevCardId;\n        const newCard = this.state.shuffledCard[cardId];\n        const previousCard = this.state.prevSelectedCard;\n\n        this.isCardMatch(previousCard, newCard, prevCardId, cardId);\n      }\n    }\n  };\n\n  isCardMatch = (card1, card2, card1Id, card2Id) => {\n    if (card1 === card2) {\n      const hideCard = this.state.shuffledCard.slice();\n      hideCard[card1Id] = -1;\n      hideCard[card2Id] = -1;\n      setTimeout(() => {\n        this.setState(prevState => ({\n          shuffledCard: hideCard\n        }))\n      }, 1000);\n    } else {\n      const flipBack = this.state.isFlipped.slice();\n      flipBack[card1Id] = false;\n      flipBack[card2Id] = false;\n      setTimeout(() => {\n        this.setState(prevState => ({ isFlipped: flipBack }));\n      }, 1000);\n    }\n  };\n\n  restartGame = () => {\n    this.setState({\n      isFlipped: Array(12).fill(false),\n      shuffledCard: App.duplicateCard().sort(() => Math.random() - 0.5),\n      clickCount: 1,\n      totalCount: 0,\n      prevSelectedCard: -1,\n      prevCardId: -1\n    });\n  };\n\n  isGameOver = () => {\n    return this.state.isFlipped.every((element, index, array) => element !== false);\n  };\n\n  render() {\n    return (\n      <ContainerView>\n        <Header restartGame={this.restartGame} totalCount={this.state.totalCount}/>\n        <CardView restartGame={this.restartGame} isGameOver={this.isGameOver} shuffledCard={this.state.shuffledCard} isFlipped={this.state.isFlipped} handleClick={this.handleClick} totalCount={this.state.totalCount}/>\n\n      </ContainerView>\n\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}